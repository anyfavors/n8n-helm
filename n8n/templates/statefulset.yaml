{{- if .Values.persistence.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "n8n.fullname" . }}
  labels:
    {{- include "n8n.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "n8n.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "n8n.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "n8n.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "n8n.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- $db := .Values.database }}
          {{- $pg := .Values.postgresql }}
          {{- $secret := ternary (dict "name" (printf "%s-db-password" (include "n8n.fullname" .)) "key" "password") $db.passwordSecret .Values.generateDatabasePassword }}
          {{- $enc := ternary (dict "name" (printf "%s-encryption-key" (include "n8n.fullname" .)) "key" "encryptionKey") .Values.encryptionKeySecret .Values.generateEncryptionKey }}
          {{- $webhook := .Values.webhookUrl }}
          {{- if or $db.host $db.port $db.user $db.password $db.passwordSecret.name $secret.name $db.database $pg.enabled $enc.name $webhook (gt (len .Values.extraEnv) 0) }}
          env:
            {{- if $webhook }}
            - name: N8N_WEBHOOK_URL
              value: "{{ $webhook }}"
            {{- end }}
            {{- if or $db.host $pg.enabled }}
            - name: DB_POSTGRESDB_HOST
              value: "{{ default (include "n8n.postgresql.fullname" .) $db.host }}"
            {{- end }}
            {{- if or $db.port $pg.enabled }}
            - name: DB_POSTGRESDB_PORT
              value: "{{ default 5432 $db.port }}"
            {{- end }}
            {{- if or $db.user $pg.enabled }}
            - name: DB_POSTGRESDB_USER
              value: "{{ default $pg.auth.username $db.user }}"
            {{- end }}
            {{- if $db.password }}
            - name: DB_POSTGRESDB_PASSWORD
              value: "{{ $db.password }}"
            {{- else if $db.passwordSecret.name }}
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $db.passwordSecret.name }}
                  key: {{ $db.passwordSecret.key | default "password" }}
            {{- else if $pg.enabled }}
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "n8n.postgresql.fullname" .) $pg.auth.existingSecret }}
                  key: {{ $pg.auth.secretKeys.userPasswordKey | default "password" }}
            {{- else if $secret.name }}
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $secret.key | default "password" }}
            {{- end }}
            {{- if or $db.database $pg.enabled }}
            - name: DB_POSTGRESDB_DATABASE
              value: "{{ default $pg.auth.database $db.database }}"
            {{- end }}
            {{- if $enc.name }}
            - name: N8N_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $enc.name }}
                  key: {{ $enc.key | default "encryptionKey" }}
            {{- end }}
            {{- with .Values.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            httpGet:
              path: {{ .httpGet.path | quote }}
              port: {{ .httpGet.port | quote }}
            {{- with omit . "httpGet" }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            httpGet:
              path: {{ .httpGet.path | quote }}
              port: {{ .httpGet.port | quote }}
            {{- with omit . "httpGet" }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- with .Values.lifecycle }}
          lifecycle:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: data
              mountPath: /home/node/.n8n
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- range .Values.extraSecrets }}
            - name: secret-{{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly | default true }}
            {{- end }}
            {{- range .Values.extraConfigMaps }}
            - name: config-{{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly | default true }}
            {{- end }}
          {{- else }}
          volumeMounts:
            - name: data
              mountPath: /home/node/.n8n
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- range .Values.extraSecrets }}
            - name: secret-{{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly | default true }}
            {{- end }}
            {{- range .Values.extraConfigMaps }}
            - name: config-{{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly | default true }}
            {{- end }}
          {{- end }}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ default (printf "%s-data" (include "n8n.fullname" .)) .Values.persistence.existingClaim }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- range .Values.extraSecrets }}
        - name: secret-{{ .name }}
          secret:
            secretName: {{ .name }}
        {{- end }}
        {{- range .Values.extraConfigMaps }}
        - name: config-{{ .name }}
          configMap:
            name: {{ .name }}
        {{- end }}
      {{- else }}
      volumes:
        - name: data
          emptyDir: {}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- range .Values.extraSecrets }}
        - name: secret-{{ .name }}
          secret:
            secretName: {{ .name }}
        {{- end }}
        {{- range .Values.extraConfigMaps }}
        - name: config-{{ .name }}
          configMap:
            name: {{ .name }}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
