# Default values for n8n.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: n8nio/n8n
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Toggle creation of Role and RoleBinding resources
rbac:
  create: false

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  runAsUser: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

# Additional environment variables for the n8n container
extraEnv: []
# - name: N8N_BASIC_AUTH_ACTIVE
#   value: "true"

# Connection details for an external PostgreSQL database. Leave values empty to
# use the built-in SQLite storage.
database:
  host: ""
  port: 5432
  user: ""
  password: ""
  # Reference an existing secret for the password instead of setting it directly
  passwordSecret:
    name: ""
    key: "password"
  database: ""

# Reference a secret containing the N8N_ENCRYPTION_KEY value
encryptionKeySecret:
  name: ""
  key: encryptionKey

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 5678
  # Annotations to add to the service
  annotations: {}

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []

resources:
  # Conservative defaults suitable for small test environments. Adjust
  # the CPU and memory values for production workloads.
  limits:
    cpu: 250m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http
# Optional lifecycle hooks. See https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
lifecycle: {}
# postStart:
#   exec:
#     command: ["sh", "-c", "echo started"]
# preStop:
#   exec:
#     command: ["sh", "-c", "echo stopping"]

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

pdb:
  enabled: false
  # minAvailable: 1
  # maxUnavailable: 0

persistence:
  enabled: false
  size: 8Gi
  storageClass: ""
  existingClaim: ""

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Mount additional Kubernetes Secrets as volumes.
extraSecrets: []
# - name: my-secret
#   mountPath: /etc/secret

# Mount additional ConfigMaps as volumes.
extraConfigMaps: []
# - name: my-config
#   mountPath: /etc/config

# Define init containers executed before the main n8n container starts.
initContainers: []
# - name: init-db
#   image: busybox
#   command: ["sh", "-c", "echo initializing"]

# Additional sidecar containers running alongside n8n.
extraContainers: []
# - name: sidecar
#   image: busybox
#   command: ["sh", "-c", "echo sidecar"]

nodeSelector: {}

tolerations: []

affinity: {}
