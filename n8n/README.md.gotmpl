# n8n Helm Chart

This directory contains the Helm chart for deploying [n8n](https://n8n.io), an extendable workflow automation tool.
Refer to the [changelog](../CHANGELOG.md) for release notes.

## Quick start

Add the chart repository and install the release:

```bash
helm repo add n8n https://anyfavors.github.io/n8n-helm
helm repo update

# install the chart with the default values
helm install my-n8n n8n/n8n
```

Customise the deployment by supplying your own `values.yaml` or overriding settings on the command line.

## Common configuration options

- **replicaCount** – number of pods to run.
- **image.tag** – n8n container image tag to deploy.
- **ingress.enabled** – expose the service using an ingress resource.
- **persistence.enabled** – store workflows on a persistent volume using a StatefulSet.
- **persistence.existingClaim** – mount an existing PersistentVolumeClaim.
- **networkPolicy.enabled** – create a NetworkPolicy to restrict traffic (enabled by default).
- **pdb.enabled** – create a PodDisruptionBudget for the deployment.
- **rbac.create** – create Role and RoleBinding resources.
- **database.host** – connect to an external PostgreSQL database instead of the built in SQLite storage.
- **postgresql.enabled** – deploy a PostgreSQL database as part of the release.
- **encryptionKeySecret.name** – Kubernetes secret providing `N8N_ENCRYPTION_KEY`.
- **generateEncryptionKey** – automatically create a secret with a random encryption key.
- **generateDatabasePassword** – automatically create a secret with a random database password.
- **runners.enabled** – enable task runners to process executions.
- **webhookUrl** – external URL for webhook callbacks.
- **extraEnv** – additional environment variables passed to the container.
- **extraSecrets** – mount additional Secrets inside the pod.
- **extraConfigMaps** – mount additional ConfigMaps inside the pod.
- **initContainers** – additional init containers executed before the main pod.
- **extraContainers** – additional containers running alongside the main pod.
- **command** – override the container entrypoint.
- **args** – container arguments passed to the command.
- **lifecycle** – container lifecycle hooks such as preStop and postStart.
- **resources** – CPU and memory requests/limits. Defaults are conservative and
  should be tuned for production installations.

See `values.yaml` for all available settings.

## Security

By default the chart runs the n8n container as a non-root user and mounts the
root filesystem as read-only with privilege escalation disabled. These settings
are defined in `podSecurityContext` and `securityContext` in `values.yaml` and
can be adjusted if needed.

Recommended security values:

- `podSecurityContext.runAsUser`: `1000`
- `podSecurityContext.runAsGroup`: `1000`
- `podSecurityContext.fsGroup`: `1000`
- `podSecurityContext.fsGroupChangePolicy`: `OnRootMismatch`
- `podSecurityContext.seccompProfile.type`: `RuntimeDefault`

Automatic mounting of the ServiceAccount token is disabled via
`serviceAccount.automount` to limit access to the Kubernetes API and reduce the
attack surface.

The chart can also manage Pod Security Admission labels on the release
namespace. Specify the desired levels under the `podSecurity` block:

```yaml
podSecurity:
  enforce: restricted
  audit: restricted
  warn: restricted
```


## Updating n8n versions

When a new n8n release is published, bump the `appVersion` field in
`Chart.yaml` and update the default `image.tag` in `values.yaml` to match.

## CPU and memory settings

The chart ships with minimal resource requests and limits suitable for small
installations. The [official n8n docs](https://docs.n8n.io/) suggest the
following starting points:

- **Start**: 320Mi memory and 10m CPU
- **Pro (10k executions)**: 640Mi memory and 20m CPU
- **Pro (50k executions)**: 1280Mi memory and 80m CPU

Increase the values under the `resources` block in your `values.yaml` file or
override them on the command line for production workloads. For example:

```bash
helm install my-n8n n8n/n8n \
  --set resources.requests.cpu=500m \
  --set resources.requests.memory=512Mi \
  --set resources.limits.cpu=1 \
  --set resources.limits.memory=1Gi
```

## Webhook URL example

Specify an external URL for webhook callbacks using `webhookUrl`:

```yaml
webhookUrl: https://my-n8n.example.com/
```

## Extra containers example

Additional sidecars can be defined via `extraContainers`:

```yaml
extraContainers:
  - name: sidecar
    image: busybox
    command: ["sh", "-c", "echo sidecar"]
```

## Publishing

Chart packages are created automatically using [chart-releaser](https://github.com/helm/chart-releaser) when commits land on `main`.
Before the first release, create a `gh-pages` branch in the repository and configure GitHub Pages to serve from it (the branch can start with an empty `index.yaml`).
To cut a release, bump the version in `Chart.yaml` and push the change. The [`release.yaml`](../.github/workflows/release.yaml) workflow will upload the packaged chart to GitHub and update the index on `gh-pages`.
Users can then add <https://anyfavors.github.io/n8n-helm> as a Helm repository to install published versions.

{{ template "chart.valuesSection" . }}
{{ template "helm-docs.versionFooter" . }}
