---
name: Lint

'on':
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare repo artifact
        run: |
          mkdir repo
          shopt -s dotglob
          rsync -a --exclude=repo "${{ github.workspace }}/" repo/
          rm -rf repo/repo || true
          if [ ! -d repo/.git ]; then
            echo ".git directory missing!"
            exit 1
          fi
          tar -czf repo.tar.gz -C repo .
      - uses: actions/upload-artifact@v4
        with:
          name: repo
          path: repo.tar.gz

  filter:
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      n8n: ${{ steps.filter.outputs.n8n }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          working-directory: repo
          filters: |
            n8n:
              - 'n8n/**'
              - '!n8n/README.md*'
            docs:
              - 'n8n/templates/**'
              - 'n8n/values.yaml'

  helm-tools:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
      - name: Ensure repo context exists
        run: |
          if [ ! -d repo ]; then
            echo "ERROR: repo directory not found!" >&2
            exit 1
          fi
          ls -al repo
      - name: Build helm-tools image if missing
        env:
          IMAGE: ghcr.io/${{ github.repository_owner }}/helm-tools:v5
        run: |
          if ! docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "${{ secrets.GITHUB_TOKEN }}" | \
              docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker build -t "$IMAGE" \
              -f repo/.github/docker/helm-tools.Dockerfile repo
            docker push "$IMAGE"
          else
            echo "$IMAGE already exists"
          fi
  lint:
    runs-on: ubuntu-latest
    needs: [prepare, filter, helm-tools]
    if: ${{ needs.filter.outputs.n8n == 'true' }}
    # Use tagged helm-tools image
    container: ghcr.io/anyfavors/helm-tools:v5
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
      - name: Set Helm version
        run: |
          echo "HELM_VERSION=$(cat .github/helm-version.txt)" >> "$GITHUB_ENV"
        working-directory: repo
      - name: Verify chart documentation
        if: ${{ needs.filter.outputs.docs == 'true' }}
        run: |
          helm-docs
          if ! git diff --quiet; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add .
            git commit -m "ci: Update Helm chart documentation"
          fi
        working-directory: repo
      - name: Setup Helm tools
        uses: ./repo/.github/actions/setup-helm-tools
        with:
          chart_dir: repo/n8n
      - name: Install helm-unittest plugin
        run: |
          if ! helm plugin list | grep -qw unittest; then
            helm plugin install https://github.com/helm-unittest/helm-unittest
          else
            echo "Helm plugin helm-unittest already installed, skipping."
          fi
        shell: bash
      - name: Install helm-schema-gen plugin
        run: |
          if ! helm plugin list | grep -qw schema-gen; then
            helm plugin install \
              https://github.com/karuppiah7890/helm-schema-gen.git
          else
            echo "Helm plugin schema-gen already installed, skipping."
          fi
        shell: bash
      - name: Helm lint
        run: helm lint n8n --values n8n/values.yaml
        working-directory: repo
      - name: Helm unit tests
        run: helm unittest n8n
        working-directory: repo
      - name: Helm template
        run: helm template n8n
        working-directory: repo
      - name: Verify values schema
        run: |
          if ! bash scripts/pre-commit-helm-schema.sh; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            mv generated-values.schema.json n8n/values.schema.json
            git add n8n/values.schema.json
            git commit -m "ci: Update Helm values schema"
          fi
        working-directory: repo

  scan:
    runs-on: ubuntu-latest
    # Use tagged helm-tools image
    container: ghcr.io/anyfavors/helm-tools:v5
    needs: [prepare, filter, helm-tools]
    if: ${{ needs.filter.outputs.n8n == 'true' }}
    env:
      TRIVY_CACHE_DIR: /tmp/trivy-cache
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
      - name: Get chart version
        id: chart
        run: |
          version=$(grep '^appVersion:' n8n/Chart.yaml | awk '{print $2}' \
            | tr -d '"')
          echo "version=$version" >> "$GITHUB_OUTPUT"
        working-directory: repo
      - name: Cache Trivy data
        id: trivy-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.TRIVY_CACHE_DIR }}
          key: trivy-${{ runner.os }}-${{ hashFiles('.github/workflows/lint.yaml') }}  # yamllint disable-line rule:line-length
          restore-keys: |
            trivy-${{ runner.os }}-
      - name: Scan chart for vulnerabilities
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: fs
          scan-ref: .
          exit-code: 1
          severity: HIGH
      - name: Scan container image for vulnerabilities
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: image
          image-ref: n8nio/n8n:${{ steps.chart.outputs.version }}
          exit-code: 1
          severity: HIGH,CRITICAL

  install:
    runs-on: ubuntu-latest
    needs: [prepare, filter, helm-tools, lint]
    if: ${{ needs.filter.outputs.n8n == 'true' }}
    strategy:
      matrix:
        k8s:
          - v1.28.15
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          wait: 240s
      - name: Debug Docker and Kind
        run: |
          docker ps -a
          kind get clusters || true
          docker info
        working-directory: repo
      - name: Check cluster readiness
        shell: bash
        run: |
          for i in {1..5}; do
            if kubectl get nodes && kubectl get pods --all-namespaces; then
              break
            fi
            echo "Cluster not ready yet, retrying in 15s..." >&2
            sleep 15
            if [ "$i" -eq 5 ]; then
              echo "Cluster failed to start" >&2
              docker ps -a || true
              kind get clusters || true
              exit 1
            fi
          done
          kubectl get nodes
          kubectl get pods --all-namespaces
        working-directory: repo
      - name: Build Helm dependencies
        run: helm dependency build ./n8n
        working-directory: repo
      - name: Install chart
        run: helm install my-n8n ./n8n --wait --timeout 300s
        working-directory: repo
      - name: Debug Helm installation
        if: failure()
        run: |
          kubectl describe pods -n default || true
          kubectl logs \
            -l "app.kubernetes.io/name=n8n,app.kubernetes.io/instance=my-n8n" \
            -n default || true
        working-directory: repo
      - name: Wait for pods
        run: |
          kubectl wait --namespace default --for=condition=ready pod \
            -l "app.kubernetes.io/name=n8n,app.kubernetes.io/instance=my-n8n" \
            --timeout=300s
        working-directory: repo
      - name: Get pods
        run: kubectl get pods -n default
        working-directory: repo
      - name: Delete release
        run: helm uninstall my-n8n
        working-directory: repo
