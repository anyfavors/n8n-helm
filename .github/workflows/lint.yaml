name: Lint

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      n8n: ${{ steps.filter.outputs.n8n }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            n8n:
              - 'n8n/**'
  lint:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.n8n == "true"
    # Use tagged helm-tools image
    container: ghcr.io/anyfavors/helm-tools:v1
    strategy:
      matrix:
        k8s:
          - v1.26.15
          - v1.27.16
          - v1.28.15
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4
      - name: Set Helm version
        run: echo "HELM_VERSION=$(cat .github/helm-version.txt)" >> "$GITHUB_ENV"
      - name: Cache helm-unittest plugin
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/.local/share/helm/plugins/helm-unittest
          key: helm-unittest-${{ env.HELM_VERSION }}
          restore-keys: |
            helm-unittest-
      - name: Cache Helm plugins and helm-docs
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.HOME }}/.local/share/helm/plugins
            /usr/local/bin/helm-docs
          key: helm-plugins-${{ env.HELM_VERSION }}
          restore-keys: |
            helm-plugins-
      - name: Verify chart documentation
        if: needs.filter.outputs.n8n == 'true'
        run: |
          helm-docs
          if ! git diff --quiet; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add .
            git commit -m "ci: Update Helm chart documentation"
          fi
      - name: Cache chart dependencies
        id: charts-cache
        uses: actions/cache@v3
        with:
          path: n8n/charts
          key: charts-${{ hashFiles('n8n/Chart.lock', 'n8n/Chart.yaml') }}
          restore-keys: |
            charts-
      - name: Build chart dependencies
        if: steps.charts-cache.outputs.cache-hit != 'true'
        run: helm dependency build n8n
      - name: Helm lint
        run: helm lint n8n
      - name: Helm lint with values
        run: helm lint n8n --values n8n/values.yaml
      - name: Helm unit tests
        run: helm unittest n8n
      - name: Helm template
        run: helm template n8n
      - name: Verify values schema
        run: |
            if ! bash scripts/pre-commit-helm-schema.sh; then
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              mv generated-values.schema.json n8n/values.schema.json
            git add n8n/values.schema.json
            git commit -m "ci: Update Helm values schema"
          fi

  scan:
    runs-on: ubuntu-latest
    # Use tagged helm-tools image
    container: ghcr.io/anyfavors/helm-tools:v1
    needs: [filter, lint]
    if: needs.filter.outputs.n8n == "true"
    steps:
      - uses: actions/checkout@v4
      - name: Get chart version
        id: chart
        run: |
          version=$(grep '^appVersion:' n8n/Chart.yaml | awk '{print $2}' | tr -d '"')
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Scan chart for vulnerabilities
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: fs
          scan-ref: n8n
          exit-code: 1
          severity: HIGH
          args: --ignorefile .trivyignore
      - name: Scan container image for vulnerabilities
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: image
          image-ref: n8nio/n8n:${{ steps.chart.outputs.version }}
          exit-code: 1
          severity: HIGH,CRITICAL
          args: --ignorefile .trivyignore

  install:
    runs-on: ubuntu-latest
    # Use tagged helm-tools image
    container: ghcr.io/anyfavors/helm-tools:v1
    needs: [filter, lint]
    if: needs.filter.outputs.n8n == "true"
    strategy:
      matrix:
        k8s:
          - v1.26.15
          - v1.27.16
          - v1.28.15
    steps:
      - uses: actions/checkout@v4
      - name: Cache kind node image
        id: kind-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/kind-node-${{ matrix.k8s }}.tar
          key: kind-node-${{ matrix.k8s }}
          restore-keys: |
            kind-node-
      - name: Download node image artifact
        if: steps.kind-cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: kind-node-${{ matrix.k8s }}
          path: ${{ env.HOME }}
        continue-on-error: true
      - name: Load node image from artifact
        if: steps.kind-cache.outputs.cache-hit != 'true'
        run: |
          if [ -f "$HOME/kind-node-${{ matrix.k8s }}.tar" ]; then
            docker load -i "$HOME/kind-node-${{ matrix.k8s }}.tar"
          fi
      - name: Load node image from cache
        if: steps.kind-cache.outputs.cache-hit == 'true'
        run: docker load -i $HOME/kind-node-${{ matrix.k8s }}.tar
      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          wait: 120s
          node_image: kindest/node:${{ matrix.k8s }}
      - name: Check cluster readiness
        run: kubectl get nodes && kubectl get pods --all-namespaces
      - name: Install chart
        run: helm install my-n8n ./n8n --wait --timeout 300s
      - name: Debug Helm installation
        if: failure()
        run: |
          kubectl describe pods -n default || true
          kubectl logs -l "app.kubernetes.io/name=n8n,app.kubernetes.io/instance=my-n8n" -n default || true
      - name: Wait for pods
        run: kubectl wait --namespace default --for=condition=ready pod -l "app.kubernetes.io/name=n8n,app.kubernetes.io/instance=my-n8n" --timeout=300s
      - name: Get pods
        run: kubectl get pods -n default
      - name: Delete release
        run: helm uninstall my-n8n
      - name: Save node image to cache
        run: |
          docker save kindest/node:${{ matrix.k8s }} -o $HOME/kind-node-${{ matrix.k8s }}.tar
      - name: Upload node image artifact
        if: steps.kind-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: kind-node-${{ matrix.k8s }}
          path: ${{ env.HOME }}/kind-node-${{ matrix.k8s }}.tar
          if-no-files-found: ignore
