name: Lint

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare repo artifact
        run: |
          mkdir repo
          shopt -s dotglob
          rsync -a --exclude=repo ${{ github.workspace }}/ repo/
          rm -rf repo/repo || true
          if [ ! -d repo/.git ]; then
            echo ".git directory missing!"
            exit 1
          fi
          tar -czf repo.tar.gz -C repo .
      - uses: actions/upload-artifact@v4
        with:
          name: repo
          path: repo.tar.gz

  filter:
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      n8n: ${{ steps.filter.outputs.n8n }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            n8n:
              - 'n8n/**'
              - '!n8n/README.md*'
            docs:
              - 'n8n/templates/**'
              - 'n8n/values.yaml'

  helm-tools:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
      - name: Ensure repo context exists
        run: |
          if [ ! -d repo ]; then
            echo "ERROR: repo directory not found!" >&2
            exit 1
          fi
          ls -al repo
      - name: Build helm-tools image if missing
        env:
          IMAGE: ghcr.io/${{ github.repository_owner }}/helm-tools:v2
        run: |
          if ! docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker build -t "$IMAGE" -f repo/.github/docker/helm-tools.Dockerfile repo
            docker push "$IMAGE"
          else
            echo "$IMAGE already exists"
          fi
  lint:
    runs-on: ubuntu-latest
    needs: [prepare, filter, helm-tools]
    if: needs.filter.outputs.n8n == "true"
    # Use tagged helm-tools image
    container: ghcr.io/anyfavors/helm-tools:v2
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
        - name: Set Helm version
          run: echo "HELM_VERSION=$(cat .github/helm-version.txt)" >> "$GITHUB_ENV"
          working-directory: repo
        - name: Verify chart documentation
          if: needs.filter.outputs.docs == 'true'
          run: |
            helm-docs
            if ! git diff --quiet; then
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              git add .
              git commit -m "ci: Update Helm chart documentation"
            fi
          working-directory: repo
        - name: Setup Helm tools
          uses: ./repo/.github/actions/setup-helm-tools
          working-directory: repo
        - name: Helm lint
          run: helm lint n8n --values n8n/values.yaml
          working-directory: repo
        - name: Helm unit tests
          run: helm unittest n8n
          working-directory: repo
        - name: Helm template
          run: helm template n8n
          working-directory: repo
        - name: Verify values schema
          run: |
            if ! bash scripts/pre-commit-helm-schema.sh; then
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              mv generated-values.schema.json n8n/values.schema.json
            git add n8n/values.schema.json
            git commit -m "ci: Update Helm values schema"
          fi
          working-directory: repo

  scan:
    runs-on: ubuntu-latest
    # Use tagged helm-tools image
    container: ghcr.io/anyfavors/helm-tools:v2
    needs: [prepare, filter, helm-tools]
    if: needs.filter.outputs.n8n == "true"
    env:
      TRIVY_CACHE_DIR: ${{ env.HOME }}/.cache/trivy
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
        - name: Get chart version
          id: chart
          run: |
            version=$(grep '^appVersion:' n8n/Chart.yaml | awk '{print $2}' | tr -d '"')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          working-directory: repo
        - name: Cache Trivy data
          id: trivy-cache
          uses: actions/cache@v3
          working-directory: repo
        with:
          path: ${{ env.TRIVY_CACHE_DIR }}
          key: trivy-${{ runner.os }}-${{ hashFiles('.github/workflows/lint.yaml') }}
          restore-keys: |
            trivy-${{ runner.os }}-
        - name: Scan chart for vulnerabilities
          uses: aquasecurity/trivy-action@0.31.0
          with:
            scan-type: fs
            scan-ref: n8n
            exit-code: 1
            severity: HIGH
            args: --ignorefile .trivyignore
          working-directory: repo
        - name: Scan container image for vulnerabilities
          uses: aquasecurity/trivy-action@0.31.0
          with:
            scan-type: image
            image-ref: n8nio/n8n:${{ steps.chart.outputs.version }}
            exit-code: 1
            severity: HIGH,CRITICAL
            args: --ignorefile .trivyignore
          working-directory: repo

  install:
    runs-on: ubuntu-latest
    # Use tagged helm-tools image
    container: ghcr.io/anyfavors/helm-tools:v2
    needs: [prepare, filter, helm-tools, lint]
    if: needs.filter.outputs.n8n == "true"
    strategy:
      matrix:
        k8s:
          - v1.28.15
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: repo
          path: .
      - name: Extract repo
        run: |
          mkdir repo
          tar -xzf repo.tar.gz -C repo
          ls -al repo
      - name: Load node image
        run: docker load -i /kind-images/kind-node-${{ matrix.k8s }}.tar
        working-directory: repo
      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          wait: 120s
          node_image: kindest/node:${{ matrix.k8s }}
      - name: Check cluster readiness
        run: kubectl get nodes && kubectl get pods --all-namespaces
        working-directory: repo
      - name: Install chart
        run: helm install my-n8n ./n8n --wait --timeout 300s
        working-directory: repo
      - name: Debug Helm installation
        if: failure()
        run: |
          kubectl describe pods -n default || true
          kubectl logs -l "app.kubernetes.io/name=n8n,app.kubernetes.io/instance=my-n8n" -n default || true
        working-directory: repo
      - name: Wait for pods
        run: kubectl wait --namespace default --for=condition=ready pod -l "app.kubernetes.io/name=n8n,app.kubernetes.io/instance=my-n8n" --timeout=300s
        working-directory: repo
      - name: Get pods
        run: kubectl get pods -n default
        working-directory: repo
      - name: Delete release
        run: helm uninstall my-n8n
        working-directory: repo
